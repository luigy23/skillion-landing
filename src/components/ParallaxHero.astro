---
import { Image } from 'astro:assets';
import Logo from '../../public/assets/pixelartAssets/hero/skillionlogotransparent.png';
import PreRegisterForm from './PreRegisterForm.astro';

// Asset URLs
const skyUrl = "../../public/assets/pixelartAssets/hero/Sky.png";
const treeUrl = "../../public/assets/pixelartAssets/hero/tree.png"; 
const mountainUrl = "../../public/assets/pixelartAssets/hero/mountaintrees.png";  
const sunUrl = "../../public/assets/pixelartAssets/hero/sun.png";
const waterfallUrl = "../../public/assets/pixelartAssets/hero/waterfallgif.gif";
const waterfallBgUrl = "../../public/assets/pixelartAssets/hero/waterfallbg.png";
---

<section id="hero" class="relative w-full h-[100svh] md:h-screen overflow-visible">
  <!-- Sky -->
  <div class="absolute inset-0 w-[150%] left-[-25%] bg-[image:var(--sky)] bg-no-repeat bg-top bg-cover"
       style={`--sky: url('${skyUrl}')`}>
  </div>

  <!-- Parallax container -->
  <div data-parallax-root class="absolute inset-0 overflow-visible pointer-events-none">
    <img id="parallax-sun" src={sunUrl} alt="Sun"
         class="absolute pixel-art" />
    <img id="parallax-mountain" src={mountainUrl} alt="Mountains"
         class="absolute pixel-art" />
    <img id="parallax-waterfall-bg" src={waterfallBgUrl} alt="Waterfall Background"
         class="absolute pixel-art object-contain object-right-bottom" />
    <img id="parallax-waterfall" src={waterfallUrl} alt="Waterfall"
         class="absolute pixel-art" />
    <img id="parallax-tree" src={treeUrl} alt="Tree"
         class="absolute pixel-art object-contain" />
  </div>

  <!-- Non-parallax content -->
  <div class="relative z-10 flex items-center justify-center h-full px-4">
    <div class="text-center text-white max-w-4xl mx-auto mt-16 md:-mt-8">
      <div class="animate-float mb-6">
        <Image src={Logo} alt="Skillion Hero Image" class="w-16 h-16 md:w-32 md:h-32 mx-auto rounded-2xl" />
      </div>
      <h1 class="text-2xl md:text-4xl lg:text-5xl mb-8 font-poppins text-extra-bold text-stroke-gold">
        <span class="text-[#203239]">Skillion: Gamify Your Real Life</span><br/>
        <span class="text-[#203239]">Turn Habits into an RPG</span>
      </h1>
      <div class="bg-white/80 backdrop-blur-sm pixel-frame p-4 md:p-6 mb-25 max-w-4xl mx-auto hero-text-container">
        <p class="text-base md:text-lg lg:text-xl leading-relaxed font-poppins text-gray-800">
          <strong class="text-gaming-gold">Skillion</strong> is the habit gamification app that turns your daily goals into an epic RPG. Earn real-life XP for every task you complete, level up personalized skills, and defeat the final boss: <i>procrastination</i>.
        </p>
      </div>

      <div class="mb-6 -mt-15 md:mt-0">
        <PreRegisterForm 
          idform='pre-register-form-en-hero'
          placeholder="player@email.com"
          buttonText="Get early access"
          lang="en"
        />
      </div>

      <p class="text-sm text-pixel-text-secondary">
        Early players will receive an <span class="text-gaming-gold font-semibold">exclusive launch discount</span>
      </p>
    </div>
  </div>

  <div class="pointer-events-none absolute inset-0 bg-gradient-to-t from-black/30 to-transparent z-[5]"></div>
</section>

<!-- Client script: configure + start -->
<script type="module">
  
  import { applyHeroConfig } from '/src/config/parallax-config.ts';

  const root = document.querySelector('[data-parallax-root]');
  let cursorFollowEnabled = false;

  function applyNow() {
    
    if (root) {
      applyHeroConfig(root);
      
      
      // Debug: Check if elements have the right classes and data attributes
      const layers = root.querySelectorAll('.parallax-layer');
      
      layers.forEach((layer, index) => {
        
      });
    } else {
      
    }
  }

  // Cursor following effect
  function initCursorFollow() {
    if (!root) return;

    const layers = root.querySelectorAll('.parallax-layer');
    let mouseX = 0;
    let mouseY = 0;

    // Mouse movement
    function handleMouseMove(e) {
      const rect = root.getBoundingClientRect();
      mouseX = (e.clientX - rect.left - rect.width / 2) / rect.width;
      mouseY = (e.clientY - rect.top - rect.height / 2) / rect.height;
      updateCursorFollow();
    }

    function updateCursorFollow() {
      layers.forEach((layer) => {
        // Get scroll-based transform from data attributes (set by parallax system)
        const scrollX = parseFloat(layer.dataset.scrollX || '0');
        const scrollY = parseFloat(layer.dataset.scrollY || '0');
        
        // Different layers move at different intensities for cursor follow
        const intensity = layer.id.includes('sun') ? 20 : 
                         layer.id.includes('mountain') ? 5 :
                         layer.id.includes('tree') ? 15 :
                         layer.id.includes('waterfall') ? 8 : 10;
        
        const followX = mouseX * intensity;
        const followY = mouseY * intensity;
        
        // Combine scroll-based parallax with cursor follow
        const finalX = scrollX + followX;
        const finalY = scrollY + followY;
        
        layer.style.transform = `translate3d(${finalX}px, ${finalY}px, 0)`;
      });
    }

    // Desktop mouse events
    document.addEventListener('mousemove', handleMouseMove, { passive: true });
    
    cursorFollowEnabled = true;
  }

  // Wait for DOM to be ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      applyNow();
      initCursorFollow();
      // Don't call initParallax() here as it's now handled globally
    });
  } else {
    // DOM is already ready
    applyNow();
    initCursorFollow();
    // Don't call initParallax() here as it's now handled globally
  }

  // Re-apply positions & speeds on resize/orientation change
  let resizeTimer;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      applyNow();
    }, 120);
  });
  window.addEventListener('orientationchange', () => {
    console.log('ParallaxHero: Orientation change detected, reapplying config...');
    applyNow();
  });
</script>
