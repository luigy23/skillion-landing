---
interface Props {
  placeholder?: string;
  buttonText?: string;
}

const { 
  placeholder = 'tu-email@aventurero.com',
  buttonText = '¬°Quiero acceso anticipado!'
} = Astro.props;
---

<form class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto" id="preregister-form">
  <div class="flex-1">
    <input 
      type="email" 
      name="email"
      placeholder={placeholder}
      required
      class="w-full px-4 py-3 bg-pixel-card border-2 border-pixel-border text-pixel-text placeholder-pixel-text-secondary rounded-none font-poppins focus:border-gaming-gold focus:outline-none focus:shadow-glow transition-all duration-300"
    />
  </div>
  <button 
    type="submit"
    class="px-6 py-3 bg-gaming-gold text-gaming-dark font-poppins font-bold border-2 border-yellow-600 shadow-pixel hover:shadow-pixel-hover hover:bg-yellow-400 hover:shadow-glow transform hover:-translate-y-1 active:translate-y-0 active:shadow-pixel transition-all duration-300 whitespace-nowrap"
  >
    {buttonText}
  </button>
</form>

<script>
  document.getElementById('preregister-form')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalButtonText = submitButton.textContent;
    const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
    
    // Mostrar estado de carga
    submitButton.disabled = true;
    submitButton.textContent = 'Registrando...';
    submitButton.classList.add('opacity-75', 'cursor-not-allowed');
    
    try {
      const email = emailInput.value;
      
      const response = await fetch('/api/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email })
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Mostrar mensaje de √©xito
        showNotification(result.message, 'success');
        
        // Limpiar formulario
        form.reset();
      } else {
        // Mostrar mensaje de error
        showNotification(result.message || 'Error al registrar el email', 'error');
      }
      
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error de conexi√≥n. Int√©ntalo de nuevo.', 'error');
    } finally {
      // Restaurar bot√≥n
      submitButton.disabled = false;
      submitButton.textContent = originalButtonText;
      submitButton.classList.remove('opacity-75', 'cursor-not-allowed');
    }
  });
  
  function showNotification(message: string, type: 'success' | 'error') {
    // Crear notificaci√≥n personalizada en lugar de alert
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 max-w-sm notification-enter ${
      type === 'success' 
        ? 'bg-gaming-gold text-gaming-dark border-2 border-yellow-600' 
        : 'bg-gaming-health text-white border-2 border-red-600'
    }`;
    
    notification.innerHTML = `
      <div class="flex items-center gap-2">
        <span class="text-xl">${type === 'success' ? 'üéÆ' : '‚ö†Ô∏è'}</span>
        <p class="font-poppins font-bold">${message}</p>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animar entrada
    setTimeout(() => {
      notification.classList.remove('notification-enter');
      notification.classList.add('notification-show');
    }, 100);
    
    // Remover despu√©s de 5 segundos
    setTimeout(() => {
      notification.classList.remove('notification-show');
      notification.classList.add('notification-exit');
      setTimeout(() => notification.remove(), 300);
    }, 5000);
  }
</script>
